// <auto-generated />
using Assignment2_ASP_NET.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment2_ASP_NET.Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200409182836_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Assignment", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HelpWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherAuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("TeacherAuId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Exercise", b =>
                {
                    b.Property<string>("Lecture")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HelpWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentAuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherAuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Lecture", "Number");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentAuId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherAuId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Student", b =>
                {
                    b.Property<string>("AuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.StudentAssignment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentName1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentAuId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "AssignmentName");

                    b.HasIndex("AssignmentName");

                    b.HasIndex("AssignmentName1");

                    b.HasIndex("StudentAuId");

                    b.ToTable("StudentAssignment");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.StudentCourse", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Semester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentAuId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("StudentAuId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Teacher", b =>
                {
                    b.Property<string>("AuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.TeacherCourse", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherAuId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseId1");

                    b.HasIndex("TeacherAuId");

                    b.ToTable("TeacherCourse");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Assignment", b =>
                {
                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId1");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", null)
                        .WithMany("Assignments")
                        .HasForeignKey("TeacherAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.Exercise", b =>
                {
                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", null)
                        .WithMany("Exercises")
                        .HasForeignKey("CourseId1");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", null)
                        .WithMany("Exercises")
                        .HasForeignKey("StudentAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TeacherAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.StudentAssignment", b =>
                {
                    b.HasOne("Assignment2_ASP_NET.Database.Models.Assignment", null)
                        .WithMany("Students")
                        .HasForeignKey("AssignmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentName1");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", null)
                        .WithMany("Assignments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.StudentCourse", b =>
                {
                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", null)
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Student", null)
                        .WithMany("Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment2_ASP_NET.Database.Models.TeacherCourse", b =>
                {
                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", null)
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId1");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherAuId");

                    b.HasOne("Assignment2_ASP_NET.Database.Models.Teacher", null)
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
